package tui

//
//// –ú–æ–¥–µ–ª—å –¥–ª—è BubbleTea
//type model struct {
//	choices  []string         // –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
//	cursor   int              // —Ç–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è –∫—É—Ä—Å–æ—Ä–∞
//	selected map[int]struct{} // –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
//	logs     []string         // –ª–æ–≥ –≤–∞–∂–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
//	baseURL  string           // –±–∞–∑–æ–≤—ã–π URL —Å–µ—Ä–≤–µ—Ä–∞
//}
//
//// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏
//func InitialModel(baseURL string) model {
//	return model{
//		choices:  []string{"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "–õ–æ–≥–∏–Ω", "–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"},
//		selected: make(map[int]struct{}),
//		logs:     []string{"–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ"},
//		baseURL:  baseURL,
//	}
//}
//
//// Init - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è BubbleTea
//func (m model) Init() tea.Cmd {
//	return nil
//}
//
//// Update - –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
//func (m model) Update(msg tea.Msg) (tea.Model, tea.Cmd) {
//	switch msg := msg.(type) {
//	case tea.KeyMsg:
//		return m.handleKeyMsg(msg)
//	case string: // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–æ–º–∞–Ω–¥
//		m.addLog(msg)
//		return m, nil
//	}
//	return m, nil
//}
//
//// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–ª–∞–≤–∏—à
//func (m model) handleKeyMsg(msg tea.KeyMsg) (tea.Model, tea.Cmd) {
//	switch msg.String() {
//	case "ctrl+c", "q":
//		m.addLog("–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
//		return m, tea.Quit
//	case "up", "k":
//		if m.cursor > 0 {
//			m.cursor--
//		}
//	case "down", "j":
//		if m.cursor < len(m.choices)-1 {
//			m.cursor++
//		}
//	case "enter", " ":
//		choice := m.choices[m.cursor]
//		m.addLog(fmt.Sprintf("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: %s", choice))
//		return m, m.handleCommand(choice)
//	}
//	return m, nil
//}
//
//// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
//func (m model) handleCommand(choice string) tea.Cmd {
//	switch choice {
//	case "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è":
//		return m.registerUser()
//	case "–õ–æ–≥–∏–Ω":
//		return m.loginUser()
//	case "–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ":
//		return m.fetchData()
//	default:
//		return nil
//	}
//}
//
//// View - –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
//func (m model) View() string {
//	var buf bytes.Buffer
//
//	// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—é
//	buf.WriteString("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n\n")
//	for i, choice := range m.choices {
//		cursor := " "
//		if m.cursor == i {
//			cursor = ">"
//		}
//		buf.WriteString(fmt.Sprintf("%s %s\n", cursor, choice))
//	}
//
//	// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–≥–æ–≤
//	buf.WriteString("\n\n–õ–æ–≥–∏:\n")
//	for _, logEntry := range m.logs {
//		buf.WriteString(fmt.Sprintf("‚Ä¢ %s\n", logEntry))
//	}
//
//	buf.WriteString("\n–ù–∞–∂–º–∏—Ç–µ q –¥–ª—è –≤—ã—Ö–æ–¥–∞, ‚Üë/‚Üì –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è, enter –¥–ª—è –≤—ã–±–æ—Ä–∞\n")
//	return buf.String()
//}
//
//// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥
//func (m *model) addLog(message string) {
//	m.logs = append(m.logs, message)
//	if len(m.logs) > 10 { // –û–≥—Ä–∞–Ω–∏—á–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–≥–æ–≤ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
//		m.logs = m.logs[1:]
//	}
//}
//
//// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
//func (m model) registerUser() tea.Cmd {
//	return func() tea.Msg {
//		requestBody, _ := json.Marshal(map[string]string{
//			"username": "user123",
//			"password": "pass123",
//		})
//
//		resp, err := http.Post(m.baseURL+"/register", "application/json", bytes.NewBuffer(requestBody))
//		if err != nil {
//			return fmt.Sprintf("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: %v", err)
//		}
//		defer resp.Body.Close()
//
//		body, _ := io.ReadAll(resp.Body)
//		return fmt.Sprintf("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ üôÇ: %s", string(body))
//	}
//}
//
//// –õ–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
//func (m model) loginUser() tea.Cmd {
//	return func() tea.Msg {
//		requestBody, _ := json.Marshal(map[string]string{
//			"username": "user123",
//			"password": "pass123",
//		})
//
//		resp, err := http.Post(m.baseURL+"/login", "application/json", bytes.NewBuffer(requestBody))
//		if err != nil {
//			return fmt.Sprintf("–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: %v", err)
//		}
//		defer resp.Body.Close()
//
//		body, _ := io.ReadAll(resp.Body)
//		return fmt.Sprintf("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: %s", string(body))
//	}
//}
//
//// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
//func (m model) fetchData() tea.Cmd {
//	return func() tea.Msg {
//		resp, err := http.Get(m.baseURL + "/data")
//		if err != nil {
//			return fmt.Sprintf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: %v", err)
//		}
//		defer resp.Body.Close()
//
//		body, _ := io.ReadAll(resp.Body)
//		return fmt.Sprintf("–î–∞–Ω–Ω—ã–µ: %s", string(body))
//	}
//}
//
//// Cobra –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ TUI
//func NewTUICommand() *cobra.Command {
//	var serverURL string
//
//	cmd := &cobra.Command{
//		Use:   "tui",
//		Short: "–ó–∞–ø—É—Å–∫ TUI –∫–ª–∏–µ–Ω—Ç–∞",
//		Run: func(cmd *cobra.Command, args []string) {
//			log.Println("–ó–∞–ø—É—Å–∫ TUI –∫–ª–∏–µ–Ω—Ç–∞")
//			p := tea.NewProgram(InitialModel(serverURL))
//			if _, err := p.Run(); err != nil {
//				fmt.Printf("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ TUI: %v", err)
//				os.Exit(1)
//			}
//		},
//	}
//
//	cmd.Flags().StringVarP(&serverURL, "server", "s", "http://localhost:8080", "URL —Å–µ—Ä–≤–µ—Ä–∞")
//	return cmd
//}
